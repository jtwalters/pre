<?php

/**
 * @file
 * Prerender/prefetch/dns-prefetch helper with visitor flow knowledge provided
 * by Google Analytics.
 *
 * This is the main module file.
 *
 * @todo Save node related properties when node form is submitted
 * @todo Prefetch stuff
 */

define('PRE_DEFAULT_PRERENDER_PROBABILITY', 65);
define('PRE_PRERENDER_DISABLE_DEFAULT', 0);

/*
 * Implements hook_init()
 */
function pre_init() {
  // include helper functions
  module_load_include('inc', 'pre');
}

/**
 * Implementation of hook_menu()
 */
function pre_menu() {
  $items = array();

  $items['admin/config/system/pre'] = array(
    'title' => 'Pre',
    'description' => 'Configure pre module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pre_admin'),
    'access arguments' => array('administer pre'),
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function pre_permission() {
  return array(
    'administer pre' => array(
      'title' => t('administer pre settings'),
    ),
  );
}

/**
 * Menu callback - admin form
 */
function pre_admin() {
  $form = array();
  $options = array();
  for ($i = 35; $i <= 95; $i += 5) {
    $options[$i] = "$i%";
    if ($i == PRE_DEFAULT_PRERENDER_PROBABILITY) {
      $options[$i] .= ' (default)';
    }
  }
  $form['pre_prerender_probability'] = array(
    '#type' => 'select',
    '#title' => 'Prerender Threshold',
    '#description' => 'Probability threshold for requesting a prerender—i.e., pages with at least <em>n%</em> chance of being viewed next will request prerender. Setting this value too low may be bad. "It is better to do nothing than mis-use prerender." —rupl',
    '#options' => $options,
    '#default_value' => variable_get('pre_prerender_probability', PRE_DEFAULT_PRERENDER_PROBABILITY),
  );

  return system_settings_form($form);
}

/*
 * Implements template_preprocess_html
 */
function pre_preprocess_html(&$variables) {
  $node = menu_get_object();

  // stop here if $node->nid isn't set
  if (!isset($node->nid)) {
    return;
  }

  // stop here if this node has prerender disabled
  if ($node->pre_prerender_disable) {
    return;
  }

  $prerender_path = null;
  $next_data = pre_next_probability(pre_current_path());

  // add always prerender path if set
  if ($node->pre_prerender_url) {
    $prerender_path = $node->pre_prerender_url;
  }
  else {
    // check paths against probability threshold
    if (is_array($next_data)) {
      foreach ($next_data as $next) {
        if (($next['probability'] * 100) > variable_get('pre_prerender_probability', PRE_DEFAULT_PRERENDER_PROBABILITY)) {
          $prerender_path = $next['destination_path'];
          break;
        }
      }
    }
  }

  // add link[rel=prerender] for prerender path
  if ($prerender_path) {
    $attributes = array(
      'href' => $prerender_path,
      'rel' => 'prerender',
    );
    drupal_add_html_head_link($attributes, TRUE);
  }
}

/**
 * Implements hook_cron()
 */
function pre_cron() {
  // Default to a daily interval
  $interval = variable_get('pre_interval', 86400);

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= $interval + variable_get('pre_last_execution', 0)) {
    $result = pre_update_ga();
    if ($result) {
      watchdog('pre', 'pre_cron executed');
      variable_set('pre_last_execution', time());
    }
  }
}

/*
 * Implements hook_requirements
 */
function pre_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  $requirements['pre'] = array();

  // Check pre cron status during runtime
  if ($phase == 'runtime') {
    $last = variable_get('pre_last_execution');
    if (is_numeric($last)) {
      $requirements['pre']['severity'] = REQUIREMENT_OK;
      $requirements['pre']['value'] = $t('Last run !time ago', array('!time' => format_interval(REQUEST_TIME - $last)));
    }
    else {
      $requirements['pre'] = array(
        'severity' => REQUIREMENT_WARNING,
        'value' => $t('Never run'),
      );
    }

    $requirements['pre']['title'] = $t('Pre cron tasks');
  }

  return $requirements;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add the Pre settings to the node form.
 */
function pre_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state['node'];

  $form['pre'] = array(
    '#group' => 'additional_settings',
    '#type' => 'fieldset',
    '#title' => 'Prefetch/Prerender',
  );

  // Suppress prerender
  $form['pre']['pre_prerender_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Never prerender pages from this node.'),
    '#default_value' => PRE_PRERENDER_DISABLE_DEFAULT,
  );
  if (isset($node->nid)) {
    $form['pre']['pre_prerender_disable']['#default_value'] = $node->pre_prerender_disable;
  }

  // Specify prerender URL
  $form['pre']['pre_prerender_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Prerender this URL:'),
    '#description' => t('Leave blank to use default behavior based on visitor data'),
    '#size' => '70',
    '#states' => array(
      // Hide when disabled is checked
      'invisible' => array(
        'input[name="pre_prerender_disable"]' => array('checked' => TRUE),
      ),
    ),
  );
  if (isset($node->nid)) {
    $form['pre']['pre_prerender_url']['#default_value'] = $node->pre_prerender_url;
  }
}

/**
 * Implements hook_node_validate().
 */
function pre_node_validate($node, $form, &$form_state) {
  // if saving node form
  if ($form_state['values']['op'] == t('Save')) {
    // if pre_prerender_url is non-empty and invalid URL then error
    if (!empty($form_state['values']['pre_prerender_url']) && !valid_url($form_state['values']['pre_prerender_url'], TRUE)) {
      form_set_error('pre_prerender_url', t('The URL %url is invalid. Enter a fully-qualified URL, such as http://www.example.com/.', array('%url' => $form_state['values']['pre_prerender_url'])));
    }
  }
}

/**
 * Implements hook_schema_alter()
 * TODO: figure out how to refactor this so it's not redundantly defined in pre.install
 */
function pre_schema_alter(&$schema) {
  $schema['node']['fields']['pre_prerender_disable'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  );

  $schema['node']['fields']['pre_prerender_url'] = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
}